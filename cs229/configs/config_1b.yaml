# Config for multi-device full finetuning in full_finetune_distributed.py
# using a Llama3.1 8B Instruct model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Meta-Llama-3.1-8B-Instruct --output-dir /tmp/Meta-Llama-3.1-8B-Instruct --ignore-patterns "original/consolidated.00.pth"
#
# To launch on 4 devices, run the following command from root:
#   tune run --nproc_per_node 4 full_finetune_distributed --config llama3_1/8B_full
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nproc_per_node 4 full_finetune_distributed --config llama3_1/8B_full checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works best when the model is being fine-tuned on 2+ GPUs.
# Single device full finetuning requires more memory optimizations. It's
# best to use 8B_full_single_device.yaml for those cases

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: /tmp/Llama-3.2-1B-Instruct/original/tokenizer.model
  max_seq_len: null

# Dataset
dataset:
  _component_: torchtune.datasets.instruct_dataset
  source: json
  data_files: /lfs/local/0/fengyuli/.cache/misc/dataset/processed/finetuneds_train_composite_0.5_20241120-172352.json
  split: train

val_dataset:
  _component_: torchtune.datasets.instruct_dataset
  source: json
  data_files: /lfs/local/0/fengyuli/.cache/misc/dataset/processed/finetuneds_val_composite_0.5_20241120-172353.json
  split: train

seed: null
shuffle: True

# Model Arguments
model:
  _component_: torchtune.models.llama3_2.llama3_2_1b

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: /tmp/Llama-3.2-1B-Instruct/
  checkpoint_files: [model.safetensors]
  recipe_checkpoint: null
  output_dir: /lfs/local/0/fengyuli/output/cs229/
  model_type: LLAMA3_2
resume_from_checkpoint: False

# Fine-tuning arguments
batch_size: 32
epochs: 20

optimizer:
  _component_: torch.optim.AdamW
  lr: 2e-6
  fused: True
loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss
max_steps_per_epoch: null
gradient_accumulation_steps: 8 # Use to increase virtual batch size

# Training env
device: cuda

# Memory management
enable_activation_checkpointing: False # True reduces memory
enable_activation_offloading: False # True reduces memory
compile: False # pytorch compile, set to true for better perf/memory
optimizer_in_bwd: False # True saves memory. Requires gradient_accumulation_steps=1

# Reduced precision
dtype: bf16

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.WandBLogger
  project: cs229
output_dir: /lfs/local/0/fengyuli/output/cs229/
log_every_n_steps: 1
log_peak_memory_stats: False
